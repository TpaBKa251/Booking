version: '3.9'

services:
  postgres:
    image: postgres:16
    container_name: postgres
    environment:
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
      POSTGRES_DB: test_db
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user"]
      interval: 5s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:4.1.0-management
    container_name: rabbitmq
    ports:
      - "5672:5672"  # Порт для общения с микросервисами
      - "15672:15672" # Web UI для управления RabbitMQ
    volumes:
      - ./config/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json
      - ./config/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      retries: 5
      timeout: 5s

  redis:
    image: redis:7-alpine
    container_name: redis-booking-cache
    ports:
      - "6379:6379"
    restart: unless-stopped
    command: [ "redis-server", "--appendonly", "yes" ]

  app:
    build:
      context: .
      dockerfile: Dockerfile-test
      args:
        INTERNAL_REPO_LOGIN: ${INTERNAL_REPO_LOGIN}
        INTERNAL_REPO_PASSWORD: ${INTERNAL_REPO_PASSWORD}
    container_name: my-app
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/test_db
      SPRING_DATASOURCE_USERNAME: test_user
      SPRING_DATASOURCE_PASSWORD: test_password
      RABBITMQ_SCHEDULES-SERVICE_USERNAME: test_user
      RABBITMQ_SCHEDULES-SERVICE_PASSWORD: test_password
      RABBITMQ_SCHEDULES-SERVICE_VIRTUALHOST: test-host
      INTERNAL_REPO_LOGIN: ${INTERNAL_REPO_LOGIN}
      INTERNAL_REPO_PASSWORD: ${INTERNAL_REPO_PASSWORD}
      REDIS_HOST: redis-cache
      REDIS_PORT: 6379
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # Монтирование Docker сокета
