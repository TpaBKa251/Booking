name: CI/CD for Jabroni

on:
  push:
    branches:
      - master

jobs:
  cache:
    name: Cache dependencies
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: cache
    outputs:
      jar-path: ${{ steps.upload.outputs.artifact-path || '' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'zulu'

      - name: Build with Gradle
        env:
          INTERNAL_REPO_LOGIN: ${{ secrets.INTERNAL_REPO_LOGIN }}
          INTERNAL_REPO_PASSWORD: ${{ secrets.INTERNAL_REPO_PASSWORD }}
        run: |
          chmod +x gradlew
          ./gradlew clean assemble

      - name: Upload built jar as artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: build/libs/*.jar

  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'zulu'
      - name: Run tests with Gradle
        env:
          INTERNAL_REPO_LOGIN: ${{ secrets.INTERNAL_REPO_LOGIN }}
          INTERNAL_REPO_PASSWORD: ${{ secrets.INTERNAL_REPO_PASSWORD }}
        run: |
          chmod +x gradlew
          ./gradlew clean test

  dockerized:
    name: Build and run in Docker
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v4

      - name: Download built jar from build job
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: ./build/libs

      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Create minimal Dockerfile (uses built jar, avoids running gradle inside image)
        run: |
          cat > Dockerfile.ci <<'EOF'
          FROM openjdk:21-jdk-slim
          WORKDIR /app
          COPY build/libs/*.jar /app/app.jar
          ENV INTERNAL_REPO_LOGIN=$INTERNAL_REPO_LOGIN
          ENV INTERNAL_REPO_PASSWORD=$INTERNAL_REPO_PASSWORD
          EXPOSE 8080
          CMD ["java", "-Dspring.profiles.active=docker", "-jar", "/app/app.jar"]
          EOF

      - name: Build Docker image (single build)
        env:
          INTERNAL_REPO_LOGIN: ${{ secrets.INTERNAL_REPO_LOGIN }}
          INTERNAL_REPO_PASSWORD: ${{ secrets.INTERNAL_REPO_PASSWORD }}
          IMAGE: ghcr.io/tpabka251/bookingservice
        run: |
          IMAGE=${IMAGE}
          docker build -f Dockerfile.ci -t ${IMAGE}:${GITHUB_SHA} .

      - name: Create docker-compose override to use our image instead of build
        env:
          IMAGE: ghcr.io/tpabka251/bookingservice
        run: |
          cat > docker-compose.override.ci.yml <<EOF
          version: '3.9'
          services:
            app:
              image: ${IMAGE}:${GITHUB_SHA}
          EOF

      - name: Start docker-compose (postgres + rabbitmq + redis + app image)
        run: |
          docker-compose -f docker-compose-test.yml -f docker-compose.override.ci.yml up -d

      - name: Wait for services to be healthy
        run: |
          echo "Waiting for services to be healthy..."
          # adjust waits/checks if needed
          sleep 20
          docker ps -a
          docker logs my-app || true

      - name: Save docker image to tar and upload as artifact
        env:
          IMAGE: ghcr.io/tpabka251/bookingservice
        run: |
          IMAGE=${IMAGE}
          docker save ${IMAGE}:${GITHUB_SHA} -o image.tar
      - name: Upload docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: image.tar

      - name: Stop and remove containers
        run: docker-compose -f docker-compose-test.yml -f docker-compose.override.ci.yml down --volumes --remove-orphans

  sonar_analysis:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: dockerized
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'zulu'
      - name: Build and analyze with SonarQube
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          INTERNAL_REPO_LOGIN: ${{ secrets.INTERNAL_REPO_LOGIN }}
          INTERNAL_REPO_PASSWORD: ${{ secrets.INTERNAL_REPO_PASSWORD }}
        run: |
          chmod +x gradlew
          ./gradlew build sonarqube --info
    continue-on-error: true

  deploy:
    name: Deploy on Prod
    runs-on: ubuntu-latest
    needs: dockerized
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: ./image-artifact

      - name: Load image into Docker
        run: |
          docker load -i ./image-artifact/image.tar

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        env:
          GPR_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Build and Push Docker Image
        env:
          INTERNAL_REPO_LOGIN: ${{ secrets.INTERNAL_REPO_LOGIN }}
          INTERNAL_REPO_PASSWORD: ${{ secrets.INTERNAL_REPO_PASSWORD }}
          IMAGE: ghcr.io/tpabka251/bookingservice
        run: |
          IMAGE=${IMAGE}
          docker tag ${IMAGE}:${GITHUB_SHA} ${IMAGE}:latest || true
          docker push ${IMAGE}:${GITHUB_SHA}
          docker push ${IMAGE}:latest

      - name: Deploy to k3s via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd Booking
            git pull origin master
            sudo kubectl apply -f k8s/test/deployment.yaml
            sudo kubectl apply -f k8s/test/service.yaml
            sudo kubectl rollout restart deployment/bookingservice
            sudo kubectl rollout status deployment/bookingservice
