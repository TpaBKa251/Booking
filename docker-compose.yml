version: '3.9'
services:
  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - shared-network

  grafana:
    image: grafana/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=user
      - GF_SECURITY_ADMIN_PASSWORD=user
    ports:
      - "3000:3000"
    networks:
      - shared-network

  tempo:
    image: grafana/tempo:2.3.0
    container_name: tempo
    ports:
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP (если вдруг понадобится)
      - "3200:3200"   # Tempo UI (если хочешь глянуть API)
    command:
      - "-config.file=/etc/tempo.yaml"
    volumes:
      - ./tempo-config.yaml:/etc/tempo.yaml
      - ./tempo-data:/var/tempo
#      - ./tempo-metrics:/var/tempo/metrics
    networks:
      shared-network:
      tempo-net:
          aliases:
            - tempo-query-frontend
  loki:
    image: grafana/loki:3.4.2
    ports:
      - "3100:3100"
    volumes:
      - loki-data:/loki
    command:
      -config.file=/etc/loki/local-config.yaml
    networks:
      - shared-network

  promtail:
    image: grafana/promtail:3.4.0
    volumes:
      - ./logs:/var/log/app
      - ./promtail-config.yaml:/etc/promtail/config.yaml
    command: -config.file=/etc/promtail/config.yaml
    networks:
      - shared-network

  # Может не стартануть, если уже запущен в сервисе расписаний (Вахта) - это нормально
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: rabbitmq
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: schedule
      RABBITMQ_DEFAULT_PASS: schedule
      RABBITMQ_DEFAULT_VHOST: schedule-service
    ports:
      - "5672:5672"  # Порт для общения с микросервисами
      - "15672:15672" # Web UI для управления RabbitMQ
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      retries: 5
      timeout: 5s
    networks:
      - shared-network

  bookingservice:
    container_name: bookingservice
    build:
      dockerfile: Dockerfile-local
      context: .
    hostname: bookingservice
    ports:
      - "8082:8080"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://hostelDB:5432/hostelService
      - SPRING_DATASOURCE_USERNAME=hostel
      - SPRING_DATASOURCE_PASSWORD=ilia
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 10s
      retries: 5
      start_period: 15s
      timeout: 10s
    networks:
      - shared-network

networks:
  shared-network:
    external: true
    driver: bridge
  tempo-net:
    driver: bridge

volumes:
  loki-data:
