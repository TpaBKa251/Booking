name: CI/CD for Jabroni
on:
  push:
    branches:
      - master
jobs:
  # Джоб для кеширования зависимостей
  cache:
    name: Cache dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

  # Джоб для обычной сборки и тестирования
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: cache
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'zulu'
          cache: 'gradle'
      - name: Build with Gradle
        env:
          INTERNAL_REPO_LOGIN: ${{ secrets.INTERNAL_REPO_LOGIN }}
          INTERNAL_REPO_PASSWORD: ${{ secrets.INTERNAL_REPO_PASSWORD }}
        run: |
          chmod +x gradlew
          ./gradlew clean build
      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: build/libs/Booking-0.0.1-SNAPSHOT.jar
      - name: Upload build artifacts for Sonar
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: build/

  dockerized:
    name: Build and run tests in Docker
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: build/libs/
      - name: Cache Docker images
        uses: actions/cache@v4
        with:
          path: /tmp/docker-images
          key: ${{ runner.os }}-docker-images-${{ hashFiles('docker-compose-test.yml') }}
          restore-keys: ${{ runner.os }}-docker-images-
      - name: Load cached Docker images
        run: |
          mkdir -p /tmp/docker-images
          if [ -f /tmp/docker-images/postgres.tar ]; then docker load < /tmp/docker-images/postgres.tar; fi
          if [ -f /tmp/docker-images/rabbitmq.tar ]; then docker load < /tmp/docker-images/rabbitmq.tar; fi
          if [ -f /tmp/docker-images/redis.tar ]; then docker load < /tmp/docker-images/redis.tar; fi
      # Устанавливаем Docker Compose
      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
      # Стартуем сервисы в Docker
      - name: Build and start services in Docker
        env:
          INTERNAL_REPO_LOGIN: ${{ secrets.INTERNAL_REPO_LOGIN }}
          INTERNAL_REPO_PASSWORD: ${{ secrets.INTERNAL_REPO_PASSWORD }}
        run: docker-compose -f docker-compose-test.yml up --build -d
      # Ждем, пока контейнеры не будут готовы
      - name: Wait for services to be healthy
        run: |
          echo "Waiting for services to be healthy..."
          sleep 20
      # Проверка логов контейнера
      - name: Check if container is running
        run: |
          docker ps -a
          docker logs my-app
      # Остановка и удаление контейнеров
      - name: Stop and remove containers
        run: docker-compose -f docker-compose-test.yml down
      - name: Save Docker images to cache
        if: always()
        run: |
          mkdir -p /tmp/docker-images
          docker save postgres:16 -o /tmp/docker-images/postgres.tar || true
          docker save rabbitmq:4.1.0-management -o /tmp/docker-images/rabbitmq.tar || true
          docker save redis:7-alpine -o /tmp/docker-images/redis.tar || true

  # Джоб для анализа SonarQube
  sonar_analysis:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: dockerized
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'zulu'
          cache: 'gradle'
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: build/
      - name: Analyze with SonarQube
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          INTERNAL_REPO_LOGIN: ${{ secrets.INTERNAL_REPO_LOGIN }}
          INTERNAL_REPO_PASSWORD: ${{ secrets.INTERNAL_REPO_PASSWORD }}
        run: |
          chmod +x gradlew
          ./gradlew sonarqube --info
        continue-on-error: true # <-- Ошибки не ломают CI/CD

  deploy:
    name: Deploy on Prod
    runs-on: ubuntu-latest
    needs: dockerized
    steps:
      - uses: actions/checkout@v4
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: build/libs/
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
      - name: Build and Push Docker Image
        env:
          INTERNAL_REPO_LOGIN: ${{ secrets.INTERNAL_REPO_LOGIN }}
          INTERNAL_REPO_PASSWORD: ${{ secrets.INTERNAL_REPO_PASSWORD }}
        run: |
          IMAGE=ghcr.io/tpabka251/bookingservice
          docker build \
            -t $IMAGE:latest \
            -t $IMAGE:${{ github.sha }} \
            .
          docker push $IMAGE:latest
          docker push $IMAGE:${{ github.sha }}
      - name: Deploy to k3s via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }} # IP или домен сервера
          username: ${{ secrets.SSH_USER }} # пользователь для SSH
          key: ${{ secrets.SSH_PRIVATE_KEY }} # приватный ключ (с кодовой фразой)
          passphrase: ${{ secrets.SSH_PASSPHRASE }} # кодовая фраза к ключу
          script: |
            cd Booking
            git pull origin master
            sudo kubectl apply -f k8s/test/deployment.yaml
            sudo kubectl apply -f k8s/test/service.yaml
            sudo kubectl rollout restart deployment/bookingservice
            sudo kubectl rollout status deployment/bookingservice