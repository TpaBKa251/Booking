plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.5'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'org.owasp.dependencycheck' version '8.3.1'
    id "org.sonarqube" version "6.0.1.5171"
    id 'jacoco'
}

group = 'ru.tpu.hostel'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

sonarqube {
    properties {
        property "sonar.projectKey", "TpaBKa251_Booking"
        property "sonar.organization", "hostel-service" // Замените на имя вашей организации
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.login", System.getenv("SONAR_TOKEN") // Используется токен из секретов GitHub
        property "sonar.coverage.jacoco.xmlReportPaths", layout.buildDirectory.file("reports/jacoco/test/jacocoTestReport.xml")
        property "sonar.coverage.exclusions", "**/*Generated*.java,**/model/*.java" // Исключения из анализа
        property "sonar.java.binaries", "build/classes/java/main" // Путь к скомпилированным классам
        property "sonar.exclusions", "**/UserServiceClient/**/*.java, " +
                "**/BookingController/**/*.java, " +
                "**/BookingControllerOld/**/*.java, " +
                "**/ResponsibleController/**/*.java, " +
                "**/BookingTimeLineRequest/**/*.java, " +
                "**/BookingTimeSlotRequest/**/*.java, " +
                "**/ResponsibleSetRequest/**/*.java, " +
                "**/AvailableTimeBookingResponse/**/*.java, " +
                "**/AvailableTimeSlotsWithResponsible/**/*.java, " +
                "**/BookingResponse/**/*.java, " +
                "**/BookingResponseWithUser/**/*.java, " +
                "**/BookingShortResponse/**/*.java, " +
                "**/ResponsibleResponse/**/*.java, " +
                "**/ResponsibleResponseWithName/**/*.java, " +
                "**/TimeSlotResponse/**/*.java, " +
                "**/UserShortResponse/**/*.java, " +
                "**/Booking/**/*.java, " +
                "**/BookingOld/**/*.java, " +
                "**/Responsible/**/*.java, " +
                "**/TimeSlot/**/*.java, " +
                "**/BookingStatus/**/*.java, " +
                "**/BookingType/**/*.java, " +
                "**/BookingWay/**/*.java, " +
                "**/BookingNotFoundException/**/*.java, " +
                "**/InvalidTimeBookingException/**/*.java, " +
                "**/NotFoundException/**/*.java, " +
                "**/ResponsibleNotFoundException/**/*.java, " +
                "**/SlotAlreadyBookedException/**/*.java, " +
                "**/SlotNotFoundException/**/*.java, " +
                "**/UserNotFound/**/*.java, " +
                "**/GlobalExceptionHandler/**/*.java, " +
                "**/BookingMapper/**/*.java, " +
                "**/BookingMapperOld/**/*.java, " +
                "**/ResponsibleMapper/**/*.java, " +
                "**/SlotMapper/**/*.java, " +
                "**/BookingRepository/**/*.java, " +
                "**/BookingRepositoryOld/**/*.java, " +
                "**/ResponsibleRepository/**/*.java, " +
                "**/TimeSlotRepository/**/*.java, " +
                "**/BookedState/**/*.java, " +
                "**/BookedStateOld/**/*.java, " +
                "**/CancelState/**/*.java, " +
                "**/CancelStateOld/**/*.java, " +
                "**/CompletedState/**/*.java, " +
                "**/CompletedStateOld/**/*.java, " +
                "**/InProgressState/**/*.java, " +
                "**/InProgressStateOld/**/*.java, " +
                "**/NotBookedState/**/*.java, " +
                "**/NotBookedStateOld/**/*.java, " +
                "**/TimeLineBookingWay/**/*.java, " +
                "**/TimeSlotBookingWay/**/*.java, " +
                "**/BookingServiceImpl/**/*.java, " +
                "**/BookingServiceImplOld/**/*.java, " +
                "**/BookingStateImpl/**/*.java, " +
                "**/BookingStateImplOld/**/*.java, " +
                "**/ResponsibleServiceImpl/**/*.java, " +
                "**/TimeSlotGenerator/**/*.java, " +
                "**/SchedulesConfig/**/*.java, " +
                "**/BookingState/**/*.java, " +
                "**/BookingService/**/*.java, " +
                "**/BookingServiceOld/**/*.java, " +
                "**/ResponsibleService/**/*.java, " +
                "**/TimeNow/**/*.java"
    }
}

dependencies {
    implementation platform("org.springframework.cloud:spring-cloud-dependencies:2023.0.2")
    //implementation 'ch.qos.logback:logback-core:1.5.13'
    implementation 'commons-io:commons-io:2.14.0'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
    runtimeOnly 'org.postgresql:postgresql'
    implementation "org.flywaydb:flyway-database-postgresql"
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

    implementation 'org.apache.commons:commons-compress:1.26.0'
    implementation 'org.apache.poi:poi:5.2.3' // Для работы с .xls файлами
    implementation 'org.apache.poi:poi-ooxml:5.2.3' // Для работы с .xlsx файлами
    implementation 'org.apache.commons:commons-collections4:4.4' // Необходимая зависимость
    implementation 'org.apache.xmlbeans:xmlbeans:5.1.1' // Для работы с .xlsx (XML-структуры)

    implementation 'jakarta.validation:jakarta.validation-api:3.0.2'

    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    compileOnly 'org.projectlombok:lombok'

    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
    testImplementation 'org.mockito:mockito-core:5.2.0'
    testImplementation 'org.assertj:assertj-core:3.24.2'
    testImplementation 'org.instancio:instancio-core:2.13.0'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // Генерируем отчет после тестов
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required.set(true) // Включаем XML для SonarCloud
        html.required.set(false)
        csv.required.set(false)
    }
}

jacoco {
    toolVersion = "0.8.11" // Последняя версия
}

jar {
    manifest {
        attributes 'Main-Class': 'ru.tpu.hostel.booking.BookingApplication'
    }
}