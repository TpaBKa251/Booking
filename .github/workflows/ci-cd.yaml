name: CI/CD for Jabroni

on:
  push:
    branches:
      - master

env:
  IMAGE: ghcr.io/tpabka251/bookingservice

jobs:
  # Кэширование зависимостей (gradle, sonar)
  cache:
    name: Cache dependencies
    runs-on: ubuntu-latest
    outputs:
      gradle-cache-key: ${{ steps.cache-gradle.outputs.cache-hit }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Gradle packages
        id: cache-gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*','**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle

  # Единая сборка + тесты (выполняется один раз)
  build:
    name: Build + Test
    runs-on: ubuntu-latest
    needs: cache
    outputs:
      jar-path: ${{ steps.upload-artifact.outputs.uploaded-path || '' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: 21

      - name: Ensure gradlew executable
        run: chmod +x gradlew

      - name: Build (assemble + test)
        env:
          INTERNAL_REPO_LOGIN: ${{ secrets.INTERNAL_REPO_LOGIN }}
          INTERNAL_REPO_PASSWORD: ${{ secrets.INTERNAL_REPO_PASSWORD }}
        run: |
          ./gradlew clean build --no-daemon --console=plain

      - name: Upload build artifact (jar)
        uses: actions/upload-artifact@v4
        with:
          name: booking-jar
          path: build/libs/*.jar

  # Собираем docker image из уже собранного jar, пушим в GHCR и запускаем docker-compose тестовую среду
  dockerized:
    name: Build & Run tests in Docker (uses built jar and pushes image)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Download built jar
        uses: actions/download-artifact@v4
        with:
          name: booking-jar
          path: ./artifacts

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Create lightweight Dockerfile.image (copies jar, no gradle inside image)
        run: |
          cat > Dockerfile.image <<'EOF'
          FROM openjdk:21-jdk-slim
          WORKDIR /app
          COPY artifacts/*.jar app.jar
          EXPOSE 8080
          ENTRYPOINT ["java","-Dspring.profiles.active=docker","-jar","/app/app.jar"]
          EOF

      - name: Build and push image to GHCR
        env:
          IMAGE: ${{ env.IMAGE }}
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --file Dockerfile.image \
            --tag ${IMAGE}:${{ github.sha }} \
            --tag ${IMAGE}:latest \
            --push .

      - name: Create docker-compose override to use prebuilt image
        env:
          IMAGE: ${{ env.IMAGE }}
        run: |
          cat > docker-compose.override.test.yml <<EOF
          version: '3.8'
          services:
            my-app:
              image: ${IMAGE}:${GITHUB_SHA}
          EOF

      - name: Install docker-compose (if absent) & run test stack
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
          docker-compose -f docker-compose-test.yml -f docker-compose.override.test.yml up -d
          # give services time to start
          sleep 20
          docker ps -a
          docker logs my-app || true

      - name: Run integration checks (optional lightweight checks)
        run: |
          # сюда можно добавить curl к эндпоинту health или тесты, если есть
          echo "Интеграционные проверки можно добавить сюда"

      - name: Stop and remove test containers
        run: docker-compose -f docker-compose-test.yml -f docker-compose.override.test.yml down

  # Sonar анализ, параллельно с deploy (не влияет на deploy)
  sonar_analysis:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: build
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'zulu'

      - name: Download built jar (optional, если нужен)
        uses: actions/download-artifact@v4
        with:
          name: booking-jar
          path: ./artifacts

      - name: Build and analyze with SonarQube
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          INTERNAL_REPO_LOGIN: ${{ secrets.INTERNAL_REPO_LOGIN }}
          INTERNAL_REPO_PASSWORD: ${{ secrets.INTERNAL_REPO_PASSWORD }}
        run: |
          chmod +x gradlew
          ./gradlew sonarqube -Dsonar.login=$SONAR_TOKEN --no-daemon --console=plain

  # Deploy — использует уже запушенный в GHCR образ (не билдит заново)
  deploy:
    name: Deploy on Prod (k3s)
    runs-on: ubuntu-latest
    needs: dockerized
    steps:
      - name: Checkout Code (for k8s manifests)
        uses: actions/checkout@v4

      - name: SSH & Deploy to k3s
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd Booking
            git pull origin master
            sudo kubectl apply -f k8s/test/deployment.yaml
            sudo kubectl apply -f k8s/test/service.yaml
            sudo kubectl rollout restart deployment/bookingservice
            sudo kubectl rollout status deployment/bookingservice
